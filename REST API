namespace VAPARS.Controllers
{
    [RequireHttps]
    [ValidRequestException]
    [PageAssetFilter()]
    public class PatientController : Controller
    {
        /// <summary>
        /// Page assets pass through from Authorization filter
        /// that includes UserCache and Permission Flag objects.
        /// Requires that each controller/method contains:
        /// with Securables
        /// -   [AuthorizationFilter(SecurableEnum=?)]
        /// with Assets only
        /// -   [AuthorizationFilter(AssetsOnly=true)]
        /// </summary>
        //private PageAssets Asset => HttpContext.Items["pagedata"] as PageAssets;

        private PageAssets Asset => HttpContext.Items["pagedata"] as PageAssets;

        [HttpPost]
        public ActionResult SSNSearch(HeaderViewModels model)
        {
            var results = new MultipartialResult(this);
            if (!ModelState.IsValid)
            {
                model.PatientList = new HashSet<Patient>();
                results.AddView("_SSNSearch", "ssnSearchDiv", model);
                results.AddView("_SSNSearchResults", "ssnResultsDiv", model);
                return results;
            }

            var models = new HeaderViewModels
            {
                PatientList = PatientService.SSNResults(model.SSNSearchModel.SSN)
            };

            results.AddView("_SSNSearchResults", "ssnResultsDiv", models);
            return results;

        }

        // GET: Patient
        // GET Flags
        [AuthorizationFilter(SecurableEnum = Securables.ViewPatients)]
        public ActionResult Index()
        {
            var models = new HeaderViewModels
            {
                PatientDetails = PatientService.GetPatientDetails(UserService.GetStoredSearch(), null),
                Flags = Asset.Flags,
                SSNSearchModel = new SSNSearchModel()
            };
            return View(models);
        }

        [HttpGet]
        [AjaxOnly]
        public ActionResult KeywordSearch(string term)
        {
            return Json(new SearchService().KeywordSearchPatientsBySsn(term).ToList(), JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        [AjaxOnly]
        public ActionResult PostalCodeSearch(string term)
        {
            return Json(new SearchService().KeywordSearchPostalCode(term).ToList(), JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        [AjaxOnly]
        public ActionResult GlobalFMSSearch(string term)
        {
            return Json(new SearchService().KeywordSearchFMSNumber(term).ToList(), JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        [AjaxOnly]
        public ActionResult PostalCodeData(string postalCode)
        {
            return Json(new SearchService().PostalCodeData(postalCode), JsonRequestBehavior.AllowGet);
        }


        // POST : Patient Details 
        // GET Flags
        [HttpPost]
        [AjaxOnly]
        [ValidateAntiForgeryTokenOnAjaxPost]
        [AuthorizationFilter(SecurableEnum = Securables.AddEditPatients)]
        public ActionResult PatientDetails(PatientViewModels models)
        {
            var results = new MultipartialResult(this);
            models.Flags = Asset.Flags;

            if (!ModelState.IsValid)
            {
                if (models.PatientDataModel.PatientId != 0)
                {
                    // retrieve next of kins
                    var nextOfKins = NextOfKinService.NextOfKinData(models.PatientDataModel.PatientId);
                    models.ListOfNextOfKins = nextOfKins.ListOfNextOfKins.ToList();
                    models.ListOfNextOfKinsAddresses = nextOfKins.ListOfNextOfKinsAddresses.ToList();
                    models.ListOfVoucherDemographics = nextOfKins.VoucherDemographics.ToList();


                }
                else
                {
                    models.ListOfNextOfKins = new List<NextOfKin>();
                    models.ListOfNextOfKinsAddresses = new List<NextOfKinAddress>();
                    models.ListOfVoucherDemographics = new List<VoucherDemographic>();

                }

                models.ListOfPatientAddresses = models.ListOfPatientAddresses ?? new List<PatientAddress>();
                models.PatientAddressesResults = models.PatientAddressesResults ?? new AddressResults();
                models.PatientDataModel.UpdateComplete = false;
                results.AddView("_PatientDetails", "newPatientFormDiv", models);

                return results;
            }

            // execute codes below if form passed validation
            switch (models.PatientDataModel.Results)
            {
                case FormStatus.Edit:
                    // define log notes on veteran details updates
                    var defaultlog = "Update patient details.";
                    if (models.PatientDataModel.SSN.ScrubSsn() != models.PatientDataModel.OriginalSSN)
                    {
                        defaultlog = $"{defaultlog} SSN Change from {models.PatientDataModel.SSN} to {models.PatientDataModel.OriginalSSN}";
                    }

                    if (models.PatientDataModel.FirstName != models.PatientDataModel.OriginalFirstName ||
                        models.PatientDataModel.LastName != models.PatientDataModel.OriginalLastName ||
                        models.PatientDataModel.MiddleInitial != models.PatientDataModel.OriginalMiddle)
                    {
                        defaultlog = $"{defaultlog} Name change to {models.PatientDataModel.LastName}, {models.PatientDataModel.FirstName} {models.PatientDataModel.MiddleInitial}" +
                            $" from {models.PatientDataModel.OriginalLastName}, {models.PatientDataModel.OriginalFirstName} {models.PatientDataModel.OriginalMiddle}";
                    }

                    // update data
                    var ps = new PatientService(models.PatientDataModel.PatientId);
                    var updateData = ps.PatientDetails;
                    if (!models.PatientDataModel.LockSSNEdit)
                    {
                        var editedSSN = models.PatientDataModel.SSN.ScrubSsn();
                        updateData.SSN = editedSSN;
                    }
                    updateData.ModDate = DateTime.Now;
                    updateData.FirstName = models.PatientDataModel.FirstName;
                    updateData.LastName = models.PatientDataModel.LastName;
                    updateData.MiddleInitial = models.PatientDataModel.MiddleInitial;
                    updateData.IsDeceased = models.PatientDataModel.IsDeceased;
                    // update patient data
                    ps.PatientDetails = updateData;
                    // update log notes
                    new PatientLogResults
                    {
                        PatientId = ps.PatientId,
                        Message = defaultlog,
                        Type = PatientLogType.System
                    }.AddPatientLogItem();
